"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const lollyTemplate_1 = require("./lollyTemplate");
const ddbClient = new AWS.DynamoDB.DocumentClient({ region: "us-east-2" });
const TableName = "LolliesTable";
// The generated page contains some dynamic data, so we don't want
// it to stay in cache for long
const cacheControlMaxAge = 3;
exports.handler = async (event, context, callback) => {
    console.log("Origin Response: ", JSON.stringify(event.Records[0].cf, null, 2));
    const config = event.Records[0].cf.config;
    const distDomain = `https://${config.distributionDomainName}`;
    const request = event.Records[0].cf.request;
    const uri = request.uri;
    let response = event.Records[0].cf.response;
    // If there is no error, do nothing.
    if (!isStatusErroneous(+response.status)) {
        return response;
    }
    // Get Lolly Id from URI
    const lollyId = getLollyId(uri);
    if (lollyId === null) {
        // Couldn't get id from URI, Redirect to 404.
        response = redirectTo404Response(response, `${distDomain}/404`);
    }
    else {
        try {
            const res = await getLollyFromDdb(lollyId);
            if (!res.Item) {
                throw new Error(`No item found, id: + ${lollyId}`);
            }
            response = lollyPageResponse(response, res.Item);
        }
        catch (err) {
            console.log("Error fetching lolly from DDB: ", err);
            response = redirectTo404Response(response, `${distDomain}/404`);
        }
    }
    return response;
};
const isStatusErroneous = (status) => status >= 400 && status <= 599;
const getLollyId = (uri) => {
    // const m = uri.match(/^\/lolly\/([a-z0-9-]+)$/i);
    // const id = Array.isArray(m) && m.length > 1 ? m[1] : null;
    let id = null;
    if (uri.startsWith("/lolly/")) {
        id = uri.slice(7);
    }
    return id;
};
const getLollyFromDdb = async (id) => {
    return await ddbClient
        .get({
        TableName,
        Key: { id },
    })
        .promise();
};
const lollyPageResponse = (response, lollyData) => {
    response.status = "200";
    response.statusDescription = "OK";
    response.headers["content-type"] = [
        {
            key: "Content-Type",
            value: "text/html;charset=UTF-8",
        },
    ];
    response.headers["cache-control"] = [
        {
            key: "Cache-Control",
            value: `max-age=${cacheControlMaxAge}`,
        },
    ];
    response.body = lollyTemplate_1.default(lollyData);
    return response;
};
const redirectTo404Response = (response, redirectPath) => {
    response.status = "302";
    response.statusDescription = "Found";
    response.headers["location"] = [
        {
            key: "Location",
            value: redirectPath,
        },
    ];
    response.body = "";
    return response;
};
//# sourceMappingURL=data:application/json;base64,